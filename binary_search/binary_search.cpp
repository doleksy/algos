// binary_search.cpp : Defines the entry point for the application.
//

#include <gtest/gtest.h>

#include <cmath>
#include <numeric>
#include <vector>

namespace
{
    int binary_search(std::vector<int> vec, int target)
    {
        int left = 0;
        int right = vec.size() - 1;

        while (left <= right)
        {
            int mid = left + (right - left) / 2;
            if (vec[mid] == target)
            {
                return mid;
            }
            else if (vec[mid] < target)
            {
                left = mid + 1;
            }
            else    // vec[mid] > target
            {
                right = mid - 1;
            }
        }

        return -1;
    }

    template <typename T, typename Pred>
    int find_1st_of(std::vector<T> vec, Pred predicate)
    {
        int left = 0;
        int right = vec.size() - 1;

        int maybe_found = -1;

        while (left <= right)
        {
            int mid = left + (right - left) / 2;
            if (predicate(vec[mid]))
            {
                maybe_found = mid;
                right = mid - 1;
            }
            else
            {
                left = mid + 1;
            }
        }

        return maybe_found;
    }

    int find_1st_true(std::vector<bool> vec)
    {
        return find_1st_of(vec, [](bool x) { return x; });
    }

    int find_1st_not_smaller(std::vector<int> vec, int target)
    {
        return find_1st_of(vec, [target](int x) { return x >= target; });
    }

    int find_1st_occurrence(std::vector<int> vec, int target)
    {
        int left = 0;
        int right = vec.size() - 1;

        int maybe = -1;

        while (left <= right)
        {
            int mid = left + (right - left) / 2;
            auto res = vec[mid] <=> target;
            if (res == 0)
            {
                maybe = mid;
                right = mid - 1;
            }
            else if (res < 0)
            {
                left = mid + 1;
            }
            else    // vec[mid] > target
            {
                right = mid - 1;
            }
        }

        return maybe;
    }

    int square_root(int n)
    {
        if (n == 0) return 0;
        if (n == 1) return 1;

        int left = 1;
        int right = n / 2;
        int result = 0;

        while (left <= right)
        {
            int mid = left + (right - left) / 2;
            int div = n / mid;
            if (mid == div)
            {
                return mid;
            }
            else if (mid > div)
            {
                result = mid;
                right = mid - 1;
            }
            else
            {
                left = mid + 1;
            }
        }
        return result - 1;
    }

    int find_min_rotated(std::vector<int> arr)
    {
        int left = 0;
        int right = arr.size() - 1;

        int result = -1;

        while (left <= right)
        {
            int mid = left + (right - left) / 2;
            if (arr[mid] <= arr[right])
            {
                result = mid;
                right = mid - 1;
            }
            else
            {
                left = mid + 1;
            }
        }

        return result;
    }

    int peak_of_mountain_array(std::vector<int> arr)
    {
        int left = 0;
        int last = arr.size() - 1;
        int right = last;
        int peak = -1;

        while (left <= right)
        {
            int mid = left + (right - left) / 2;
            if (mid == last || (arr[mid] > arr[mid+1]))
            {
                peak = mid;
                right = mid - 1;
            }
            else
            {
                left = mid + 1;
            }
        }

        return peak;
    }

    bool newspapers_feasible(std::vector<int> &newspapers_read_times, int num_coworkers, int limit)
    {
        int timeSpent = 0;
        int workersUsed = 0;

        for (int readTime : newspapers_read_times)
        {
            if (timeSpent + readTime > limit)
            {
                timeSpent = 0;
                ++workersUsed;
            }
            timeSpent += readTime;
        }

        // Is there still time left? Add a worker
        if (time != 0)
        {
            ++workersUsed;
        }

        // Did we use more coworkers than we had?
        return workersUsed <= num_coworkers;
    }

    int newspapers_split(std::vector<int> &newspapers_read_times, int num_coworkers)
    {
        int low = *std::max_element(newspapers_read_times.cbegin(), newspapers_read_times.cend());
        int high = std::accumulate(newspapers_read_times.cbegin(), newspapers_read_times.cend(), 0);

        int answer = -1;

        while (low <= high)
        {
            int mid = low + (high - low) / 2;
            if (newspapers_feasible(newspapers_read_times, num_coworkers, mid))
            {
                answer = mid;
                high = mid - 1;
            }
            else
            {
                low = mid + 1;
            }
        }

        return answer;
    }

    // https://www.metacareers.com/profile/coding_practice_question/?problem_id=951929261870357

    const int billion = 1'000'000'000;

    bool isLessThanBillion(std::vector <float> &growthRates, int days)
    {
        float users{ 0.0f };
        for (const float gr : growthRates)
        {
            users += std::pow(gr, days);
        }

        return users < static_cast<float>(billion);
    }

    int getBillionUsersDay(std::vector <float> growthRates)
    {
        // Write your code here
        const float maxGR = *std::max_element(growthRates.begin(), growthRates.end());
        const int maxDays = std::log(billion) / std::log(maxGR);

        int left = 1;
        int right = maxDays + 1;

        int maybe = -1;

        while (left <= right)
        {
            int mid = left + (right - left) / 2;

            if (isLessThanBillion(growthRates, mid))
            {
                left = mid + 1;
            }
            else
            {
                maybe = mid;
                right = mid - 1;
            }
        }

        return maybe;
    }

}   // namespace


TEST(BinarySearch, EmptyVectorReturnsMinusOne)
{
    std::vector<int> vec{};

    auto index = binary_search(vec, 42);
    EXPECT_EQ(index, -1);
}

TEST(BinarySearch, SingleElementNotMatchingTargetReturnsMinusOne)
{
    std::vector<int> vec{ 1 };

    auto index = binary_search(vec, 42);
    EXPECT_EQ(index, -1);
}

TEST(BinarySearch, SingleElementMatchingTargetReturnsZero)
{
    std::vector<int> vec{ 42 };

    auto index = binary_search(vec, 42);
    EXPECT_EQ(index, 0);
}

TEST(BinarySearch, MultipleElementsNotMatchingTargetReturnsMinusOne)
{
    std::vector<int> vec{ 1, 2, 3, 4, 5, 6, 7 };

    auto index = binary_search(vec, 42);
    EXPECT_EQ(index, -1);
}

TEST(BinarySearch, MultipleElementsMatchingTargetReturnsCorrectIndex)
{
    std::vector<int> vec{ 1, 2, 3, 4, 5, 6, 7 };

    auto index = binary_search(vec, 4);
    EXPECT_EQ(index, 3);
}

TEST(BinarySearch, Test1)
{
    std::vector<int> vec{ 1, 3, 5, 7, 8 };

    auto index = binary_search(vec, 5);
    EXPECT_EQ(index, 2);
}

TEST(BinarySearch, Test2)
{
    std::vector<int> vec{ 1, 2, 3, 4, 5, 6, 7 };

    auto index = binary_search(vec, 0);
    EXPECT_EQ(index, -1);
}

TEST(BinarySearch, Test3)
{
    std::vector<int> vec{ 2, 8, 89, 120, 1000 };

    auto index = binary_search(vec, 120);
    EXPECT_EQ(index, 3);
}

TEST(BinarySearch, Test4)
{
    std::vector<int> vec{ 10, 20 };

    auto index = binary_search(vec, 20);
    EXPECT_EQ(index, 1);
}

TEST(BinarySearch, Test5)
{
    std::vector<int> vec{ 1 };

    auto index = binary_search(vec, 1);
    EXPECT_EQ(index, 0);
}

TEST(BinarySearch, Test6)
{
    std::vector<int> vec{ };

    auto index = binary_search(vec, 1);
    EXPECT_EQ(index, -1);
}

TEST(BinarySearch, Test7)
{
    std::vector<int> vec{ 1, 2, 3, 4, 5 };

    auto index = binary_search(vec, 10);
    EXPECT_EQ(index, -1);
}

//////////////////////////////////////////////////////////////////////////

TEST(FindFirstTrue, Test1)
{
    std::vector<bool> vec{ false, false, true, true, true };

    auto index = find_1st_true(vec);
    EXPECT_EQ(index, 2);
}

TEST(FindFirstTrue, Test2)
{
    std::vector<bool> vec{ true };

    auto index = find_1st_true(vec);
    EXPECT_EQ(index, 0);
}

TEST(FindFirstTrue, Test3)
{
    std::vector<bool> vec{ false, false, false};

    auto index = find_1st_true(vec);
    EXPECT_EQ(index, -1);
}

TEST(FindFirstTrue, Test4)
{
    std::vector<bool> vec{ true, true, true, true, true };

    auto index = find_1st_true(vec);
    EXPECT_EQ(index, 0);
}

TEST(FindFirstTrue, Test5)
{
    std::vector<bool> vec{ false, true };

    auto index = find_1st_true(vec);
    EXPECT_EQ(index, 1);
}

TEST(FindFirstTrue, Test6)
{
    std::vector<bool> vec{ false, false, false, false, false, false, false, false, true };

    auto index = find_1st_true(vec);
    EXPECT_EQ(index, 8);
}

//////////////////////////////////////////////////////////////////////////

TEST(FindFirstNotSmaller, Test1)
{
    std::vector<int> vec{ 1, 3, 3, 5, 8, 8, 10 };

    auto index = find_1st_not_smaller(vec, 2);
    EXPECT_EQ(index, 1);
}

TEST(FindFirstNotSmaller, Test2)
{
    std::vector<int> vec{ 0 };

    auto index = find_1st_not_smaller(vec, 0);
    EXPECT_EQ(index, 0);
}

TEST(FindFirstNotSmaller, Test3)
{
    std::vector<int> vec{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

    auto index = find_1st_not_smaller(vec, 10);
    EXPECT_EQ(index, 9);
}

TEST(FindFirstNotSmaller, Test4)
{
    std::vector<int> vec{ 1, 2, 2, 2, 2, 2, 2, 3, 5, 8, 8, 10 };

    auto index = find_1st_not_smaller(vec, 2);
    EXPECT_EQ(index, 1);
}

TEST(FindFirstNotSmaller, Test5)
{
    std::vector<int> vec{ 86, 124, 232, 371, 422, 443, 696, 1189, 1306, 1517, 1718, 1730, 1908, 2119, 2368, 2449, 2578, 2827, 2997, 3116, 3349, 3488, 3620, 3801, 3861, 4171, 4288, 4498, 4673, 4711, 4726, 4774, 4801, 4818, 5239, 5486, 5709, 6124, 6363, 6364, 6408, 6796, 7033, 7096, 7301, 7307, 7471, 7544, 7703, 8246, 8271, 8281, 8537, 8653, 8657, 8811, 8967, 9005, 9428, 9434, 9437, 10249, 10333, 10611, 10980, 11166, 11173, 11683, 11905, 11950, 11951, 11984, 12068, 12428, 13365, 13976, 14099, 14103, 14145, 14162, 14183, 14526, 14569, 14753, 14838, 15083, 15214, 15489, 15512, 15600, 15975, 16037, 16171, 16356, 16519, 16606, 16929, 17114, 17194, 17333, 17364, 17403, 17430, 17501, 17534, 17607, 17645, 17883, 18118, 18188, 18319, 18441, 18507, 18593, 18626, 18701, 18781, 19087, 19097, 19202, 19424, 19512, 19561, 19625, 19765, 19806, 20123, 20285, 20548, 20558, 20844, 20919, 20974, 21126, 21171, 21685, 21724, 21739, 21752, 21780, 21821, 22127, 22189, 22521, 22606, 23084, 23262, 23415, 23503, 23513, 23608, 23662, 23690, 23713, 23795, 23811, 23865, 23997, 24218, 24285, 25058, 25344, 25637, 25751, 25758, 25805, 26037, 26068, 26103, 26786, 26840, 27139, 27326, 27453, 27721, 27936, 28243, 28407, 28709, 28735, 28913, 29240, 29654, 29666, 30149, 30725, 30884, 31108, 31175, 31271, 31912, 32178, 32199, 32255, 32318, 32643, 32680, 32795, 32858, 32885, 32908, 33085, 33317, 33481, 33578, 34055, 34504, 34578, 34715, 35023, 35086, 35481, 35692, 35872, 35885, 35897, 35918, 36133, 36507, 36632, 36683, 36811, 37007, 37074, 37151, 37451, 37533, 37538, 37857, 37919, 38041, 38144, 38206, 38337, 38417, 38428, 38429, 38515, 38630, 38641, 38703, 38779, 38856, 38905, 39162, 39412, 39426, 39499, 39502, 39671, 39800, 40068, 40116, 40130, 40303, 40541, 40626, 40756, 40953, 41110, 41231, 41391, 41523, 41595, 41641, 41831, 42373, 42656, 42717, 42734, 43350, 43496, 43653, 43802, 43822, 44056, 44288, 44365, 44482, 44559, 44574, 44661, 44774, 45066, 45138, 45296, 45597, 45844, 45881, 45943, 46019, 46021, 46087, 46321, 46503, 46576, 46622, 46736, 46877, 46993, 47322, 47341, 47359, 47451, 47530, 47635, 47746, 47996, 48142, 48423, 48655, 48731, 48889, 49005, 49022, 49046, 49263, 49330, 49414, 49702, 49778, 49846, 49906, 50050, 50167, 50229, 50317, 50412, 50524, 50974, 51044, 51098, 51362, 51431, 52236, 52925, 52991, 53118, 53133, 53200, 53497, 53538, 53640, 53745, 54240, 54255, 54382, 54459, 54459, 54608, 54896, 54932, 55134, 55154, 55280, 55779, 56063, 56256, 56273, 56273, 56317, 56579, 56581, 56730, 56751, 56958, 57405, 57811, 58126, 58305, 58954, 59352, 59395, 59419, 59441, 59446, 59718, 59724, 60582, 60638, 60666, 60678, 60861, 60959, 60991, 61030, 61272, 61481, 61614, 61811, 61924, 61936, 62164, 62167, 62210, 62353, 62512, 62525, 62552, 62706, 62789, 62858, 62953, 62975, 63012, 63074, 63160, 63263, 63411, 63659, 63791, 63983, 64152, 64170, 64240, 64414, 64455, 64469, 64522, 64672, 64692, 65051, 65232, 65447, 65581, 65906, 66301, 66383, 67173, 67193, 67224, 67525, 67692, 67763, 67913, 67924, 68445, 68773, 69381, 69450, 69473, 69560, 69697, 69804, 69926, 69930, 70509, 70567, 70677, 70703, 70963, 71054, 71271, 71453, 71463, 71511, 71695, 71728, 71840, 71869, 71967, 71971, 72074, 72080, 72309, 72510, 72512, 72730, 72811, 73310, 73441, 73906, 73914, 73930, 73963, 74162, 74533, 74855, 75133, 75227, 75399, 75450, 75827, 76108, 76132, 76139, 76298, 76788, 76826, 76866, 77002, 77301, 77354, 77437, 77850, 77851, 77853, 77973, 78094, 78110, 78116, 78671, 78728, 79050, 79148, 79696, 79771, 80034, 80062, 80189, 80421, 80422, 80551, 80631, 80842, 80930, 80992, 81317, 81379, 81485, 81579, 81751, 81752, 81754, 81798, 82015, 82156, 82177, 82504, 82627, 82688, 82751, 82868, 83475, 83666, 84187, 84418, 84525, 84638, 84860, 84986, 85047, 85062, 85156, 85212, 85323, 85463, 85853, 86003, 86515, 86535, 86724, 86838, 86979, 87034, 87171, 87235, 87549, 87596, 87930, 88033, 88295, 88844, 88858, 88859, 89274, 89359, 89434, 89846, 89880, 89909, 89910, 90101, 90221, 90287, 90289, 90310, 90331, 90498, 90523, 90555, 90626, 91042, 91045, 91125, 91281, 91396, 91913, 92092, 92336, 92362, 92507, 92756, 92767, 92802, 92822, 92838, 93381, 93493, 93845, 94111, 94170, 94320, 94330, 94388, 94426, 94520, 94562, 94712, 95028, 95617, 95728, 95837, 95849, 95900, 96027, 96567, 96708, 96979, 97066, 97127, 97227, 97299, 97448, 97650, 97717, 98094, 98252, 98277, 98379, 99055, 99378, 99483, 99567, 99666, 99867 };

    auto index = find_1st_not_smaller(vec, 91945);
    EXPECT_EQ(index, 588);
}

TEST(FindFirstNotSmaller, Test6)
{
    std::vector<int> vec{ 59, 157, 200, 338, 339, 358, 430, 624, 702, 811, 1268, 1288, 1397, 1479, 1606, 1606, 1632, 1641, 1718, 1825, 1942, 1973, 2235, 2430, 2534, 2658, 2866, 2869, 3671, 3725, 3915, 3946, 3982, 3984, 3994, 4043, 4182, 4189, 4218, 4287, 4291, 4307, 4439, 4644, 4826, 4938, 5226, 5401, 5932, 5987, 5995, 6555, 6598, 6669, 6783, 6824, 7054, 7136, 7392, 7484, 7527, 7630, 7708, 7763, 7848, 7964, 7998, 8004, 8010, 8032, 8162, 8296, 8345, 8745, 8924, 8949, 9043, 9224, 9695, 9735, 9854, 9937, 10023, 10131, 10170, 10208, 10241, 10560, 10817, 10950, 10968, 11225, 11263, 11337, 11359, 11471, 11489, 11548, 11672, 11694, 11755, 11810, 11873, 12152, 12207, 12278, 12291, 12348, 12383, 12580, 12756, 12786, 13126, 13127, 13288, 13360, 13615, 13726, 13819, 14067, 14213, 14340, 14485, 14653, 14698, 14709, 14889, 14946, 15019, 15052, 15312, 15351, 15674, 15717, 15736, 15868, 16105, 16186, 16368, 16449, 16495, 16496, 16506, 16624, 16647, 16713, 16783, 17235, 17351, 17410, 17607, 17735, 17785, 17860, 17916, 17927, 17966, 18101, 18271, 18607, 18636, 18910, 18954, 19000, 19081, 19307, 19338, 19583, 19700, 19773, 19792, 19921, 20101, 20186, 20230, 20235, 20331, 20661, 20733, 20742, 21032, 21110, 21292, 21368, 21388, 21512, 22100, 22169, 22274, 22317, 22488, 22561, 22713, 22955, 23080, 23143, 23153, 23304, 23834, 23930, 24022, 24078, 24121, 24239, 24267, 24294, 24337, 24583, 24660, 24739, 24745, 24988, 25184, 25235, 25248, 25294, 25391, 25458, 25719, 25731, 25842, 25966, 26025, 26099, 26328, 26495, 26711, 27417, 27505, 27510, 28043, 28231, 28327, 28526, 28688, 28789, 28936, 29045, 29194, 29239, 29268, 29463, 29566, 29566, 29655, 30175, 30344, 30401, 30417, 30630, 31254, 31501, 31513, 31845, 31897, 32011, 32098, 32153, 32712, 32724, 32831, 32917, 33006, 33074, 33182, 33392, 33394, 33415, 33461, 33513, 33595, 33693, 34284, 34291, 34494, 34542, 34554, 34563, 34758, 34772, 34802, 34817, 34839, 34841, 34855, 35112, 35119, 35291, 35291, 35409, 35638, 35736, 35743, 35783, 35812, 35822, 35908, 35928, 35999, 36147, 36229, 36389, 36414, 36446, 36674, 36923, 37084, 37458, 37495, 37621, 37899, 38114, 38166, 38241, 38469, 38573, 38619, 39197, 39414, 39658, 39775, 39865, 39888, 39966, 40065, 40124, 40531, 40652, 40931, 41484, 41693, 41715, 41723, 41859, 41862, 41957, 42045, 42387, 42632, 43082, 43180, 43369, 43381, 43549, 43635, 43985, 44033, 44065, 44090, 44271, 44348, 44643, 45020, 45089, 45324, 45338, 45849, 45927, 46011, 46090, 46830, 46842, 47074, 47204, 47233, 47235, 47323, 47329, 47366, 47444, 47449, 47454, 47466, 47563, 47637, 47744, 48034, 48121, 48184, 48546, 48560, 48615, 48616, 48619, 48626, 48641, 48687, 48788, 48909, 48910, 48956, 49051, 49103, 49288, 49467, 49476, 49782, 49809, 49860, 49895, 49949, 50319, 50340, 50373, 50423, 50683, 50896, 50901, 50902, 51008, 51072, 51528, 52102, 52135, 52203, 52325, 52383, 52887, 53008, 53325, 53431, 53616, 53732, 53814, 53980, 54264, 54289, 54734, 54936, 54947, 55278, 55327, 55428, 55666, 55748, 55848, 55891, 56242, 56320, 56352, 56433, 56452, 56758, 57098, 57398, 57401, 57488, 57552, 57603, 57787, 57795, 57835, 58113, 58226, 58354, 58427, 58472, 58568, 58599, 58614, 58775, 58898, 59160, 59183, 59242, 59369, 59711, 59735, 60000, 60041, 60648, 60768, 60824, 61244, 61459, 61474, 61637, 61662, 61725, 61741, 61892, 62010, 62088, 62221, 62347, 62577, 62587, 62636, 62681, 62723, 62793, 62804, 62870, 62928, 62971, 63235, 63405, 63561, 63574, 63622, 63728, 63793, 63919, 63962, 63970, 64062, 64073, 64447, 64490, 64819, 64920, 64955, 65096, 65200, 65495, 65556, 65601, 65851, 65894, 66019, 66024, 66072, 66209, 66388, 66495, 66548, 67314, 67456, 67550, 67723, 67747, 67818, 67838, 68131, 68192, 68194, 68300, 68438, 68794, 68794, 68847, 68868, 68982, 69069, 69080, 69098, 69123, 69571, 69572, 69692, 69941, 70189, 70201, 70357, 70509, 70556, 70680, 70815, 70973, 71020, 71037, 71140, 71212, 71293, 71408, 71444, 71535, 71694, 71712, 72228, 72263, 72276, 72563, 72842, 72997, 73104, 73215, 73219, 73381, 73533, 73848, 73864, 73932, 74095, 74506, 74568, 74680, 74788, 74960, 75020, 75157, 75211, 75482, 75505, 75635, 75932, 76617, 76661, 76871, 77117, 77145, 77196, 77221, 77255, 77299, 77428, 77552, 77622, 77685, 77753, 77833, 77847, 77919, 78035, 78069, 78294, 78872, 78968, 79040, 79051, 79060, 79255, 79505, 79719, 79817, 79948, 79960, 80138, 80239, 80403, 80494, 80767, 80821, 81018, 81083, 81129, 81191, 81299, 81308, 81531, 81564, 81571, 81592, 81760, 81767, 81980, 81997, 82049, 82165, 82314, 82428, 82470, 82685, 82729, 83031, 83161, 83220, 83551, 83644, 83698, 83789, 83807, 83941, 84029, 84159, 84234, 84409, 84439, 84485, 84504, 84560, 84593, 84616, 84685, 84932, 85123, 85162, 85310, 85323, 85401, 85757, 85757, 85763, 85905, 85979, 86020, 86408, 86685, 86709, 86779, 86834, 86866, 86876, 86887, 86891, 86934, 87002, 87149, 87156, 87367, 87464, 87576, 87846, 87995, 88307, 88581, 88596, 88750, 88921, 88943, 88947, 88962, 89152, 89248, 89397, 89403, 89638, 89647, 89873, 89874, 89931, 90121, 90135, 90273, 90471, 90551, 90609, 90731, 90937, 90998, 91023, 91169, 91476, 91517, 91687, 91700, 91840, 91848, 91930, 92006, 92076, 92250, 92406, 92493, 92726, 92810, 92824, 92841, 93198, 93374, 93386, 93557, 93576, 93705, 93744, 93896, 94021, 94156, 94176, 94241, 94327, 94538, 94543, 94716, 94908, 94915, 95217, 95266, 95342, 95415, 95473, 95536, 95591, 95609, 95659, 95881, 95923, 96136, 96204, 96316, 96667, 96856, 96861, 96868, 96973, 97093, 97370, 97389, 97504, 97619, 97624, 97710, 97820, 97847, 97893, 98171, 98318, 98465, 98660, 98709, 98955, 99033, 99061, 99259, 99361, 99479, 99579, 99645, 99867, 99905, 99987 };

    auto index = find_1st_not_smaller(vec, 15559);
    EXPECT_EQ(index, 132);
}

TEST(FindFirstNotSmaller, Test7)
{
    std::vector<int> vec{ 30, 250, 536, 1581, 2957, 3027, 3342, 3544, 3661, 3798, 4914, 5138, 6105, 6328, 6499, 6891, 7076, 7602, 7727, 7747, 7812, 7952, 8108, 8158, 8229, 8519, 8827, 9012, 9156, 9216, 9494, 9594, 10173, 10556, 10561, 10728, 10876, 11112, 11257, 11265, 11370, 11889, 11928, 12267, 12337, 12770, 13299, 13389, 13393, 13419, 13507, 13570, 14408, 15119, 15347, 15439, 15475, 15716, 16101, 16226, 16448, 16952, 17455, 17947, 18889, 18907, 19094, 19215, 19470, 19772, 19781, 19826, 19830, 19920, 21160, 21273, 21621, 21805, 21894, 22026, 23097, 23399, 23562, 23688, 23900, 24624, 24983, 25381, 25578, 25782, 26125, 26203, 26787, 26897, 26995, 27256, 27363, 28140, 28600, 28896, 28977, 29201, 29234, 29260, 29719, 29733, 30245, 30403, 30583, 31377, 31544, 31994, 32455, 32561, 33063, 33970, 34224, 34438, 34702, 35381, 36416, 36493, 36623, 36953, 37302, 37674, 37740, 37959, 39071, 39291, 39354, 40433, 40580, 40875, 41123, 41175, 41761, 43209, 43583, 44267, 44571, 44580, 44833, 44909, 45020, 45089, 45125, 45482, 45533, 45812, 45898, 46591, 46604, 46621, 47024, 47393, 47415, 47659, 47731, 47793, 47931, 48064, 48398, 48810, 49313, 49865, 50566, 50926, 51242, 51429, 51658, 51750, 51883, 51993, 52153, 52175, 52294, 52486, 52518, 52644, 54433, 54804, 54810, 54912, 54937, 55272, 55642, 56045, 56429, 56838, 56875, 57753, 58411, 58619, 58829, 58875, 59399, 59795, 59853, 60515, 61027, 61078, 61614, 61897, 62141, 62147, 62656, 62733, 62845, 62966, 63114, 63262, 63417, 63565, 63972, 64089, 64589, 64709, 64895, 65066, 65078, 65100, 65889, 66510, 67100, 67566, 67676, 67847, 67947, 68838, 69220, 69239, 69693, 69807, 70069, 70239, 70335, 70868, 70984, 71194, 71793, 72016, 72118, 72226, 72963, 73148, 73304, 73434, 73972, 74115, 74231, 74289, 74830, 74868, 75107, 75290, 75642, 75752, 76008, 76231, 76387, 76414, 76748, 76750, 77217, 77905, 78738, 78941, 79316, 79817, 79929, 79988, 80074, 80377, 80443, 80487, 80949, 81134, 81797, 82238, 82657, 83137, 83153, 83341, 83419, 83743, 84268, 84296, 84820, 85319, 85587, 85847, 86313, 86584, 87051, 87584, 87641, 88630, 89181, 89204, 89291, 89391, 89485, 90448, 90504, 90709, 90770, 91133, 91251, 91362, 91618, 91945, 92588, 93256, 93337, 93929, 94611, 94781, 95609, 95814, 95834, 96778, 96965, 96976, 97039, 98261, 98322, 99239, 99371, 99394 };

    auto index = find_1st_not_smaller(vec, 60707);
    EXPECT_EQ(index, 200);
}

TEST(FindFirstNotSmaller, Test8)
{
    std::vector<int> vec{ 385, 603, 1561, 1732, 2220, 2620, 2964, 3359, 3970, 4341, 4411, 4460, 4910, 5738, 6412, 6675, 7609, 7951, 8254, 8269, 8437, 9171, 9361, 10504, 10925, 11165, 11174, 11279, 11739, 11852, 12233, 12466, 12735, 12794, 13962, 14120, 14179, 14216, 14600, 14906, 15238, 15267, 15826, 15853, 15993, 16558, 16574, 17691, 17936, 18224, 18401, 18630, 19425, 19468, 19681, 20140, 20253, 20748, 21060, 21781, 22302, 22540, 22970, 23304, 24861, 25196, 25312, 25408, 25887, 25906, 26274, 26451, 27252, 27446, 27535, 27684, 28808, 28829, 29357, 29559, 30371, 30694, 30725, 31966, 32432, 33393, 33863, 34965, 34975, 37270, 37441, 37846, 38758, 39105, 39244, 39327, 40473, 41128, 42655, 44239, 44359, 44668, 44802, 44988, 45115, 46064, 46627, 46752, 46796, 47207, 47291, 47723, 47978, 48550, 49200, 49404, 49441, 49686, 49866, 49949, 50637, 50642, 51180, 51609, 51939, 52521, 52780, 53366, 53433, 53752, 54646, 54783, 55496, 55852, 56496, 56678, 57095, 57603, 57871, 58344, 58465, 58487, 59334, 59392, 59681, 59803, 60179, 61773, 62021, 62170, 63582, 63884, 63994, 64050, 64832, 64878, 65170, 65218, 65407, 66010, 66181, 66369, 66508, 66819, 67434, 67739, 68180, 68281, 69112, 69190, 69300, 69705, 70741, 71425, 73049, 73906, 73924, 74596, 75120, 75192, 75885, 76022, 76118, 76223, 76594, 77137, 78727, 78815, 79225, 79351, 79523, 80152, 80905, 81286, 81787, 84130, 84398, 84652, 84923, 85160, 85879, 86121, 86172, 86272, 86618, 86895, 86923, 86928, 90463, 90610, 91902, 91920, 91988, 92031, 92381, 92457, 92822, 92841, 93780, 93958, 94286, 94497, 95045, 95095, 95158, 95543, 97485, 98168, 99042, 99486, 99533 };

    auto index = find_1st_not_smaller(vec, 78669);
    EXPECT_EQ(index, 186);
}

TEST(FindFirstNotSmaller, Test9)
{
    std::vector<int> vec{ 1, 3, 3, 3, 3, 3 };

    auto index = find_1st_not_smaller(vec, 3);
    EXPECT_EQ(index, 1);
}

//////////////////////////////////////////////////////////////////////////

TEST(FindFirstOccurrence, Test1)
{
    std::vector<int> vec{ 1, 3, 3, 3, 3, 6, 10, 10, 10, 100 };

    auto index = find_1st_occurrence(vec, 3);
    EXPECT_EQ(index, 1);
}

TEST(FindFirstOccurrence, Test2)
{
    std::vector<int> vec{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, };

    auto index = find_1st_occurrence(vec, 1);
    EXPECT_EQ(index, 0);
}

TEST(FindFirstOccurrence, Test3)
{
    std::vector<int> vec{ 1, 22, 22, 33, 50, 100, 20000 };

    auto index = find_1st_occurrence(vec, 33);
    EXPECT_EQ(index, 3);
}

TEST(FindFirstOccurrence, Test4)
{
    std::vector<int> vec{ 4, 6, 7, 7, 7, 20 };

    auto index = find_1st_occurrence(vec, 8);
    EXPECT_EQ(index, -1);
}

TEST(FindFirstOccurrence, Test5)
{
    std::vector<int> vec{ 6, 7, 9, 10, 10, 10, 90 };

    auto index = find_1st_occurrence(vec, 10);
    EXPECT_EQ(index, 3);
}

TEST(FindFirstOccurrence, Test6)
{
    std::vector<int> vec{ 4 };

    auto index = find_1st_occurrence(vec, 4);
    EXPECT_EQ(index, 0);
}

TEST(FindFirstOccurrence, Test7)
{
    std::vector<int> vec{ 2, 3, 5, 7, 11 };

    auto index = find_1st_occurrence(vec, 2);
    EXPECT_EQ(index, 0);
}

TEST(FindFirstOccurrence, Test8)
{
    std::vector<int> vec{ 1, 3, 5, 8, 13, 21 };

    auto index = find_1st_occurrence(vec, 40);
    EXPECT_EQ(index, -1);
}

//////////////////////////////////////////////////////////////////////////

TEST(SquareRoot, Test1)
{
    auto result = square_root(4);
    EXPECT_EQ(result, 2);
}

TEST(SquareRoot, Test2)
{
    auto result = square_root(8);
    EXPECT_EQ(result, 2);
}

TEST(SquareRoot, Test3)
{
    auto result = square_root(10);
    EXPECT_EQ(result, 3);
}

TEST(SquareRoot, Test4)
{
    auto result = square_root(0);
    EXPECT_EQ(result, 0);
}

TEST(SquareRoot, Test5)
{
    auto result = square_root(1);
    EXPECT_EQ(result, 1);
}

//////////////////////////////////////////////////////////////////////////

TEST(MinInRotatedSortedArray, Test1)
{
    std::vector<int> vec{ 30, 40, 50, 10, 20 };

    auto index = find_min_rotated(vec);
    EXPECT_EQ(index, 3);
}

TEST(MinInRotatedSortedArray, Test2)
{
    std::vector<int> vec{ 0, 1, 2, 3, 4, 5 };

    auto index = find_min_rotated(vec);
    EXPECT_EQ(index, 0);
}

TEST(MinInRotatedSortedArray, Test3)
{
    std::vector<int> vec{ 0 };

    auto index = find_min_rotated(vec);
    EXPECT_EQ(index, 0);
}

TEST(MinInRotatedSortedArray, Test4)
{
    std::vector<int> vec{ 1, 2, 3, 5, 8, 0 };

    auto index = find_min_rotated(vec);
    EXPECT_EQ(index, 5);
}

//////////////////////////////////////////////////////////////////////////

TEST(PeakOfAMountainArray, Test1)
{
    std::vector<int> vec{ 0, 1, 2, 3, 2, 1, 0 };

    auto peak = peak_of_mountain_array(vec);
    EXPECT_EQ(peak, 3);
}

TEST(PeakOfAMountainArray, Test2)
{
    std::vector<int> vec{ 0, 10, 3, 2, 1, 0 };

    auto peak = peak_of_mountain_array(vec);
    EXPECT_EQ(peak, 1);
}

TEST(PeakOfAMountainArray, Test3)
{
    std::vector<int> vec{ 0, 10, 0 };

    auto peak = peak_of_mountain_array(vec);
    EXPECT_EQ(peak, 1);
}

TEST(PeakOfAMountainArray, Test4)
{
    std::vector<int> vec{ 0, 1, 2, 12, 22, 32, 42, 52, 62, 72, 82, 92, 102, 112, 122, 132, 133, 132, 111, 0 };

    auto peak = peak_of_mountain_array(vec);
    EXPECT_EQ(peak, 16);
}

//////////////////////////////////////////////////////////////////////////

TEST(Newspapers, Test1)
{
    std::vector<int> vec{ 7, 2, 5, 10, 8 };

    auto peak = newspapers_split(vec, 2);
    EXPECT_EQ(peak, 18);
}

TEST(Newspapers, Test2)
{
    std::vector<int> vec{ 1, 4, 4 };

    auto peak = newspapers_split(vec, 3);
    EXPECT_EQ(peak, 4);
}

TEST(Newspapers, Test3)
{
    std::vector<int> vec{ 2873, 2837, 10, 3, 12, 34, 21, 450, 12, 4, 39, 1, 40, 59, 2, 67, 93, 49, 837, 499, 237, 287, 459, 12309, 9249, 94878, 30 };

    auto peak = newspapers_split(vec, 4);
    EXPECT_EQ(peak, 94878);
}

TEST(Newspapers, Test4)
{
    auto vec = new std::vector<int>{};

    auto peak = newspapers_split(*vec, 50000);
    EXPECT_EQ(peak, 1000);
}

TEST(Newspapers, Test5)
{
    auto vec = new std::vector<int>{};

    auto peak = newspapers_split(*vec, 123);
    EXPECT_EQ(peak, 18643);
}

TEST(Newspapers, Test6)
{
    std::vector<int> vec{ 1, 1, 1, 1, 1, 1 };

    auto peak = newspapers_split(vec, 6);
    EXPECT_EQ(peak, 1);
}

TEST(Newspapers, Test7)
{
    std::vector<int> vec{ 15, 15, 15, 15 };

    auto peak = newspapers_split(vec, 4);
    EXPECT_EQ(peak, 15);
}

//////////////////////////////////////////////////////////////////////////

TEST(BillionUsers, Test1)
{
    std::vector<float> vec{ 1.1, 1.2, 1.3 };

    auto days = getBillionUsersDay(vec);
    EXPECT_EQ(days, 79);
}

TEST(BillionUsers, Test2)
{
    std::vector<float> vec{ 1.01, 1.02 };

    auto days = getBillionUsersDay(vec);
    EXPECT_EQ(days, 1047);
}

TEST(BillionUsers, Test3)
{
    std::vector<float> vec{ 1.5 };

    auto days = getBillionUsersDay(vec);
    EXPECT_EQ(days, 52);
}

TEST(BillionUsers, Test4)
{
    std::vector<float> vec{ 1.5, 1.5, 1.5, 1.5 };

    auto days = getBillionUsersDay(vec);
    EXPECT_EQ(days, 48);
}


//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
