//  sort.cpp : Defines the entry point for the application.
//

#include <gtest/gtest.h>

#include <algorithm>
#include <vector>


namespace
{
    std::vector<int> insertion_sort(std::vector<int> unsorted)
    {
        auto begIt = unsorted.begin();
        auto endIt = unsorted.end();

        for (auto it = begIt; it != endIt; ++it)
        {
            auto currentIt = it;
            while ((currentIt != begIt) && (*currentIt < *(std::prev(currentIt))))
            {
                std::iter_swap(currentIt, std::prev(currentIt));
                --currentIt;
            }
        }

        return unsorted;
    }

    std::vector<int> selection_sort(std::vector<int> unsorted)
    {
        auto begIt = unsorted.begin();
        auto endIt = unsorted.end();

        for (auto it = begIt; it != endIt; ++it)
        {
            auto minIt = it;

            for (auto findMinIt = it; findMinIt != endIt; ++findMinIt)
            {
                if (*findMinIt < *minIt)
                {
                    minIt = findMinIt;
                }
            }

            std::iter_swap(it, minIt);
        }

        return unsorted;
    }


    std::vector<int> bubble_sort(std::vector<int> unsorted)
    {
        auto begIt = unsorted.begin();
        auto endIt = unsorted.end();

        int n = unsorted.size();
        // Iterate through all list elements in reversed order
        for (int i = n - 1; i >= 0; i--)
        {
            // Track whether a swap occurred in this pass
            bool swapped = false;
            for (int j = 0; j < i; j++)
            {
                // Swap if the element found is greater than the next element
                if (unsorted[j] > unsorted[j + 1]) {
                    std::swap(unsorted[j], unsorted[j + 1]);
                    swapped = true;
                }
            }
            // If no two elements were swapped, the list is sorted
            if (!swapped) break;
        }

        return unsorted;
    }


    std::vector<int> merge_sort(std::vector<int> unsorted)
    {
        int n = unsorted.size();
        if (n <= 1)
        {
            return unsorted;
        }

        int mid = n / 2;
        const auto midIt = std::next(unsorted.begin(), mid);

        auto left = merge_sort(std::vector<int>(unsorted.begin(), midIt));
        auto right = merge_sort(std::vector<int>(midIt, unsorted.end()));

        std::vector<int> result;
        result.reserve(n);

        auto leftIt = left.begin();
        auto rightIt = right.begin();

        while (leftIt != left.end() or rightIt != right.end())
        {
            if (leftIt == left.end())           // If left list is empty, append element from right
            {
                result.push_back(*rightIt);
                ++rightIt;
            }
            else if (rightIt == right.end())    // If right list is empty, append element from the left
            {
                result.push_back(*leftIt);
                ++leftIt;
            }
            else if (*leftIt <= *rightIt)       // If left element <= right element, append smallest element from left
            {
                result.push_back(*leftIt);
                ++leftIt;
            }
            else                                // Append smaller element from right (right element < left element)
            {
                result.push_back(*rightIt);
                ++rightIt;
            }
        }

        return result;
    }

    struct sort_tests
    {
        std::function<std::vector<int>(std::vector<int>)> sort;
        std::string name;
    };

    sort_tests sorters[] =
    {
        { insertion_sort, "insertion" },
        { selection_sort, "selection" },
        { bubble_sort, "bubble" },
        { merge_sort, "merge" },
    };

    enum sorter_idx { INSERT = 0, SELECT, BUBBLE, MERGE };

}   // namespace

//////////////////////////////////////////////////////////

class Sorting : public ::testing::TestWithParam<sorter_idx>
{
};

TEST_P(Sorting, Sort0_0)
{
    std::vector<int> input;

    auto sortFunc = sorters[GetParam()].sort;
    auto sorted = sortFunc(input);

    std::sort(input.begin(), input.end());

    EXPECT_EQ(input, sorted);
}

TEST_P(Sorting, Sort0_1)
{
    std::vector input{ 42 };

    auto sortFunc = sorters[GetParam()].sort;
    auto sorted = sortFunc(input);

    std::sort(input.begin(), input.end());

    EXPECT_EQ(input, sorted);
}

TEST_P(Sorting, Sort0_2_0)
{
    std::vector input{ 1, 42 };

    auto sortFunc = sorters[GetParam()].sort;
    auto sorted = sortFunc(input);

    std::sort(input.begin(), input.end());

    EXPECT_EQ(input, sorted);
}

TEST_P(Sorting, Sort0_2_1)
{
    std::vector input{ 42, 1 };

    auto sortFunc = sorters[GetParam()].sort;
    auto sorted = sortFunc(input);

    std::sort(input.begin(), input.end());

    EXPECT_EQ(input, sorted);
}

TEST_P(Sorting, Sort1)
{
    std::vector input { 5, 3, 1, 2, 4 };

    auto sortFunc = sorters[GetParam()].sort;
    auto sorted = sortFunc(input);

    std::sort(input.begin(), input.end());

    EXPECT_EQ(input, sorted);
}

TEST_P(Sorting, Sort2)
{
    std::vector input{ 8, 10, 1, 3, 4, 6, 9, 2, 7, 5 };

    auto sortFunc = sorters[GetParam()].sort;
    auto sorted = sortFunc(input);

    std::sort(input.begin(), input.end());

    EXPECT_EQ(input, sorted);
}

TEST_P(Sorting, Sort3)
{
    std::vector input{ 8466, 1024, 7744, 4668, 2011, 7744, 6861, 8964, 1100 };

    auto sortFunc = sorters[GetParam()].sort;
    auto sorted = sortFunc(input);

    std::sort(input.begin(), input.end());

    EXPECT_EQ(input, sorted);
}

TEST_P(Sorting, Sort4)
{
    std::vector input{ 1, 2, 4, 5, 8, 9, 7, 3, 6 };

    auto sortFunc = sorters[GetParam()].sort;
    auto sorted = sortFunc(input);

    std::sort(input.begin(), input.end());

    EXPECT_EQ(input, sorted);
}

TEST_P(Sorting, Sort5)
{
    std::vector input
    {
        6465136, 893954, 3274687, 1100585, 172330, 1621246, 603622, 7271478, 761407,
        201668, 2300554, 99047, 215341, 865787, 9695, 436082, 310231, 4229731, 29136,
        226594, 1433007, 1258220, 21076, 5891738, 2797590, 1288244, 6516, 1153339, 210524,
        75186, 3074006, 482406, 97143, 1002854, 5336238, 13303, 5254045, 6121500, 7190595,
        1706794, 2068654, 7269043, 48908, 4719784, 5790340, 2186206, 2458012, 1704102,
        3402806, 1863732, 61760, 1781, 876952, 6301931, 2221350, 2074109, 3, 3466, 191009,
        2516076, 2643668, 3677887, 147082, 5127084, 4464, 7315098, 4678, 5030475, 80556,
        5940659, 2362882, 2277209, 4884826, 2417019, 7706176, 7671062, 555, 325433, 2912265,
        2287362, 71675, 3141855, 704087, 1320125, 4211519, 19, 155583, 2997187, 21205, 343373,
        338494, 834821, 2522744, 793132, 1648177, 6007626, 5867974, 96311, 7257, 244115, 1249141,
        5610870, 337439, 112921, 9556, 5435760, 7563702, 4417571, 13770, 930019, 1610022, 265167,
        7593510, 903841, 439228, 3618018, 182055, 2945948, 3909864, 30385, 5871794, 3119542,
        303352, 80045, 2227446, 1363118, 4859426, 2287591, 576631, 34752, 1553, 4588951, 203,
        2541345, 7230687, 6070552, 3224303, 2834929, 2200881, 1483604, 1919272, 61640, 2520541,
        3479642, 6365933, 7811879, 5994323, 1147004, 6856467, 1762, 7886417, 5357609, 5190, 70789,
        1161686, 2090099, 1860239, 7645186, 6366560, 300306, 202057, 6724, 1589242, 113, 72083,
        1257466, 1789889, 4631085, 5109134, 6048132, 5025736, 17179, 888584, 6080302, 1320398,
        51292, 866347, 2130359, 3304192, 579381, 1094119, 3147329, 4461053, 3207639, 3361978,
        4093120, 734862, 167321, 765180, 242792, 2580283, 3105419, 7831, 335466, 4221239, 16013,
        49812, 4874, 1282086, 3456310, 189302, 275276, 791706, 13396, 6406954, 5786621, 1465,
        2781035, 2156324, 180954, 6336785, 418, 1682906, 4969, 225718, 2976400, 4712725, 49419,
        108135, 338541, 553377, 5631, 179222, 395440, 11621, 4441618, 370136, 635622, 2229702,
        5769447, 2800427, 3910369, 6078152, 50894, 105495, 56899, 5294543, 837456, 1746859,
        2518735, 2908859
    };

    auto sortFunc = sorters[GetParam()].sort;
    auto sorted = sortFunc(input);

    std::sort(input.begin(), input.end());

    EXPECT_EQ(input, sorted);
}

TEST_P(Sorting, Sort6)
{
    std::vector input
    {
        43021501, 22557288, 6282880, 209764861, 33804461, 316617696, 371373797, 378942608, 240189556,
        220321779, 442976452, 343346428, 485872, 204502726, 2883810, 603913, 81408624, 20294357, 616946,
        264, 442538494, 448777789, 217305151, 3354221, 269085, 156875012, 25134311, 2134098, 135133158,
        52249547, 1956950, 256003450, 1103157, 244950321, 33780, 171524597, 328039145, 221941123, 175175703,
        96514118, 230202480, 163787752, 32813563, 372646540, 973766, 392738216, 436594353, 91746188,
        8106040, 323962106, 128577, 41211294, 38686222, 363650528, 91585518, 112329539, 490924514, 210214366,
        752896, 4335501, 23134619, 86158922, 309351193, 40544415, 6307604, 304597214, 393620990, 94957756,
        96463176, 416898323, 94295398, 99300689, 402841272, 68725740, 453625957, 101147426, 36761479, 170392613,
        21646710, 7372787, 5708905, 395027, 213740910, 65092802, 1028633, 38984619, 195259, 33440264, 14579541,
        398826278, 778199, 4184338, 346247933, 61209, 202992006, 723609, 230392279, 95564446, 6728684, 454045082,
        1983255, 27268953, 355993188, 431421912, 33186575, 192247, 45371207, 505975, 1326928, 163412911, 460348067,
        353544997, 393207414, 15024392, 232116818, 12554129, 100809120, 54527038, 324047945, 435908018, 24335458,
        157936252, 264092252, 131355354, 506621346, 441548827, 417999234, 190893967, 4651421, 420599569, 1977873,
        313242, 1886235, 370717596, 388895874, 1134304, 15544445, 83164076, 146357682, 35590408, 158628972,
        214916484, 220017116, 5205647, 31897227, 41967993, 5093675, 198830563, 145892, 194830, 4143753, 3001416,
        25581100, 102137, 970100, 753, 397002745, 168829, 71356876, 275744139, 2549, 225218166, 267179897, 155224063,
        27714400, 134256521, 102921914, 49217263, 65480775, 465714286, 481778717, 105604078, 6154545, 236254023,
        377525, 110493242, 151678387, 221053, 438506201, 82944615, 32231, 102493, 111372038, 2371232, 93075693,
        61594731, 44507634, 7014936, 89497706, 24462, 382520833, 133145961, 58108, 10494486, 5003397, 71523694,
        234528238, 101564320, 125317411, 16771979, 5514052, 327247262, 217937571, 191145378, 305164021, 248284638,
        182, 205404016, 458852750, 2138445, 166739079, 90315487, 67139090, 105, 4536688, 101885, 503511972, 372629563,
        43094348, 67854046, 205196442, 582556, 63663641, 8045696, 451638319, 201995247, 161675755, 68820459, 20339,
        30491037, 363057714, 38266414, 62223171, 1151992, 380967328, 44194921, 87219994, 78038977, 513833875, 18817459,
        731034, 301400093, 88053087, 365641794, 16921698, 58507, 19790628, 391454721, 170984308, 8479899, 10323463,
        92542, 462787550, 104412411, 415618224, 453114507, 216406199, 202, 628194, 214098, 4066125, 9782162, 252068001,
        299995941, 162194313, 72705580, 6825863, 58293858, 23989034, 321397407, 239634805, 334127088, 131052, 12135948,
        393308186, 122147284, 64267104, 95908532, 71525723, 590275, 2690, 67310, 420550222, 384043558, 200433136, 438565387,
        284767164, 3610453, 79862824, 6710007, 17935099, 228424317, 90419, 14663672, 50440180, 16253721, 21118377,
        159776924, 1079819, 45606538, 468105004, 49109649, 27801005, 55572710, 166472023, 2674511, 17139309, 50764297,
        3315043, 23441635, 35976233, 30771676, 371593826, 38892170, 59482372, 226364162, 7761540, 89693030, 5172329,
        3683322, 28045970, 76131704, 123361575, 6128322, 129576598, 116600506, 178176852, 313138568, 76990185, 242798036,
        104475912, 3712602, 3872701, 108, 251555831, 332740726, 13673313, 20512, 90490632, 9305508, 485669255, 8093639,
        266965731, 246770514, 174490172, 839327, 13814490, 231394021, 367269724, 67520373, 197400081, 12226833, 34138680,
        9334740, 3301846, 462925665, 122945969, 90592772, 1181277, 3494296, 151020763, 157144763, 18629037, 2257701,
        5362086, 8033614, 131423718, 313181361, 68807956, 61326220, 2195169, 80756534, 76146593, 15950, 437122834,
        127749162, 45420886, 460659164, 303885250, 461263426, 1460337, 228072023, 111597249, 95873187, 113695098,
        53941942, 284941306, 268256199, 136402, 73634898, 10573470, 100098616, 17373544, 12905009, 15100473, 15439230,
        5099947, 1972955, 243776848, 274989658, 59379333, 2344612, 30982772, 123807593, 267474489, 82303957, 8323852,
        322473829, 49814511, 493268619, 366618, 103124111, 3354740, 481009, 15285931, 98547854, 490690172, 415540786,
        328359288, 455231686, 193030642, 185785381, 404068069, 107123005, 106715103, 494880, 118123041, 270130997,
        251933665, 116967573, 7816884, 14631467, 13795636, 94973687, 312522881, 8566450, 410274307, 41365055, 4797600,
        331084760, 111173645, 607701, 380638678, 13229303, 142891092, 774267, 99585023, 191841684, 167816826, 617248,
        483009471, 102485979, 160548234, 179852886, 2117403, 361772381, 216959046, 3462452, 203349765, 364026153,
        305984760, 289387076, 225106396, 299535995, 392793467, 393631872, 28637321, 296111787, 9003685, 68227695,
        276456478, 29732026, 131124526, 97841398, 300735052, 39257309, 30823882, 3, 175534353, 436661206, 134687803,
        9411349, 178122899, 224665281, 54461296, 201042477, 53342021, 228135446, 133549708, 138682589, 3631485,
        254670903, 153020943, 421252655, 163147360, 469210342, 1793391, 376268195, 133502108, 4733165, 10125226,
        356074466, 1192773, 339859483, 118036004, 1317284, 127947308, 99499766, 13958533, 719516, 15934782, 59978,
        2746870, 150106, 5074571, 415360084
    };

    auto sortFunc = sorters[GetParam()].sort;
    auto sorted = sortFunc(input);

    std::sort(input.begin(), input.end());

    EXPECT_EQ(input, sorted);
}

TEST_P(Sorting, Sort7)
{
    std::vector input
    {
        95381578, 100490384, 27163882, 94655084, 38399, 6069359, 1096194, 2106, 51148031, 54948, 1115564, 122507113,
        108923456, 4365444, 10262876, 6556725, 2397917, 41599505, 3616378, 4884534, 5493124, 2445401, 14040706, 645133,
        2375864, 64489089, 12977678, 3388097, 445754, 2299878, 37425339, 1915305, 5290086, 26873695, 23363374, 7387631,
        23708220, 38648, 70547213, 22891736, 66098336, 38673670, 69034592, 6584476, 43437232, 20152286, 8749325, 524, 414322,
        50926906, 40748385, 1707309, 15669151, 51350, 35061659, 9053, 38530539, 31662, 42410977, 7924901, 21711375, 119691,
        60256791, 538372, 54427971, 3066112, 9297214, 9957078, 36102845, 36778038, 6755502, 885521, 101746342, 43524947,
        11337914, 108308, 56271817, 9703, 67105401, 110755936, 17879148, 94886195, 439406, 7250451, 79116425, 19932784,
        5316915, 109460, 4402949, 14101479, 9687087, 5684989, 44666021, 116, 32056397, 79092845, 108329, 66042293, 12888354,
        12974635, 70022414, 154, 2628750, 104702, 59099682, 27133971, 16439, 73206499, 78290885, 8354603, 585763, 39124,
        51068309, 6328864, 56580628, 28832686, 4799313, 2991554, 3159542, 74045145, 50431252, 10603759, 299123, 1198334,
        19326206, 8484057, 103064, 4173185, 41965607, 18424788, 845814, 7550172, 94887997, 76458549, 2657754, 8350, 120822075,
        78819, 25226570, 193849, 18140781, 97719, 59411421, 64225469, 2868367, 55101, 86810, 587098, 458810, 11502614,
        11343174, 18205176, 90672315, 1815036, 4408967, 203485, 97417001, 93900100, 34060206, 9833623, 727944, 1965175,
        170234, 78142352, 1375800, 79976, 4604258, 9491897, 1845994, 11378018, 84366148, 613136, 63069, 34454265, 42650372,
        69979728, 18365215, 68004966, 30159996, 106215313, 10298160, 850, 36387397, 68541, 572238, 265994, 2579995, 66754146,
        19945938, 34147944, 93307527, 32491925, 10557295, 24561991, 752442, 13147, 243709, 23699, 10392454, 8488013, 12240705,
        9977796, 3970927, 12847556, 15449338, 64053, 107936921, 19093184, 3226840, 3, 41317309, 82163442, 3254920, 287707,
        4168270, 15432463, 9110, 39564231, 9630635, 60825011, 45180668, 44275906, 22888784, 15258444, 692304, 62221661,
        2696850, 8877142, 64089342, 17551009, 19423648, 850252, 8065, 43499142, 92420655, 11937444, 11201379, 6958587, 3806159,
        37197632, 24643382, 71015364, 4790272, 1338610, 22472773, 15725766, 18277501, 14899899, 113464242, 5705952, 1690327,
        50612400, 72002737, 4769576, 48976993, 118382524, 38712568, 39388601, 6114789, 1526567, 2078470, 1313724, 17459369,
        312810, 197896, 14590876, 10678058, 27257727, 7377, 101062, 393951, 11293367, 254240, 78145170, 123113197, 65089133,
        490186, 64212203, 19047782, 6070711, 32723, 15315153, 11800292, 7562, 626511, 23817, 31212522, 4428149, 30932706,
        233986, 8602178, 93843092, 74409996, 1743909, 18430966, 103273456, 4706, 6547282, 125636836, 77472347, 11815873,
        117771218, 246057, 260375, 19869664, 52046014, 10784957, 82464985, 1554, 80839230, 51338970, 54749331, 65244148,
        13470154, 9243904, 81543980, 11010961, 71685542, 110011545, 1516, 344704, 31011112, 30592345, 3657390, 7666756,
        13579733, 118698204, 119928669, 3530628, 91903, 40000370, 89106406, 48334847, 83135680, 44135007, 8672402, 3192,
        47113, 82393031, 15650703, 34679513, 1739084, 21950617, 85273132, 425888, 3027292, 19344245, 1845322, 81454589,
        36091305, 69153722, 71520427, 73608525, 53309, 41270842, 38743485, 7618888, 18139, 9139475, 16951291, 13466276,
        44722154, 27161318, 2839224, 66483022, 22809663, 434439, 46264, 54467, 17741449, 19681207, 124653936, 100594120,
        659720, 2663766, 67819, 5397046, 10809733, 125373586, 25147976, 19790397, 10122038, 25353499, 11793465, 3156, 2315,
        85496752, 8244720, 1842267, 5258145, 77383858, 3, 105934826, 1917, 8023406, 7010238, 6674281, 13528839, 63705,
        117881624, 57909295, 1628104, 36, 4518993, 12445862, 29360866, 883267, 48089174, 30776522, 123414407, 6646264, 936090,
        12379059, 92538625, 771481, 29142791, 78565707, 53760996, 4849366, 3233312, 20277580, 46946139, 5813058, 59044432,
        6995497, 20492851, 91856201, 56445453, 90664675, 6241515, 67632686, 612439, 19916795, 8923838, 43162, 12411199,
        10171946, 33630, 39052712, 1801575, 11779686, 52754659, 47445611, 17331918, 398987, 45658095, 6379204, 7073872,
        2717729, 408631, 12964570, 1301954, 104761391, 4802849, 15, 53333023, 20843956, 22996328, 179681, 1148, 6153586,
        10341502, 57048093, 765006, 17394794, 101419274, 26576516, 6903185, 20400218, 1680333, 43878, 5428903, 3511915,
        12586583, 26050012, 8571627, 21740015, 88099, 2498877, 94741559, 63060458, 110839138, 4945, 17393305, 24415231,
        33711289, 3250157, 18201791, 54515224, 1619762, 57260559, 118228606, 41703784, 74980646, 4615999, 2610, 1481077, 2860,
        38542366, 118843474, 117468604, 13820183, 107812332, 81335237, 2446362, 71233149, 129311, 7355708, 263194, 6534419,
        3252, 40889122, 65209349, 93110, 2017783, 1160597, 30802295, 16966430, 114492207, 6465675, 26353178, 87265417, 658220,
        609981, 58299839, 1965309, 87701642, 90225048, 44852497, 5310434, 13763258, 320146, 2475987, 15263336, 104817, 23,
        1786381, 25273, 57496324, 103339764, 20258104, 1300878, 81689256, 75199169, 2354147, 39885001, 274724, 24816643, 7375,
        42918724, 37309755, 168558, 123247003, 50415880, 27673368, 39182493, 81263, 10758435, 208736, 42635147, 28512150,
        76941103, 34358170, 476791, 96110495, 46322, 22870646, 2592694, 85851146, 13359, 2032332, 8617839, 841265, 1500376,
        32345, 47779847, 120275057, 75763057, 104647112, 18539207, 51762, 3505300, 41001, 35200639, 16688810, 23424851,
        61762321, 1017990, 83158760, 38461811, 7869284, 52138888, 75332692, 2985918, 298568, 46541106, 5648642, 62586610,
        1637, 113940106, 298369, 120536856, 111356444, 60918761, 84771093, 30380055, 110092718, 4602861, 55090848, 21969451,
        87150404, 31972074, 41504674, 23046122, 967, 28880357, 28764814, 13603162, 17875112, 112964103, 45014723, 980030,
        1005422, 119528991, 55460722, 751, 83892107, 8167790, 148675, 117223282, 71664, 3735164, 37900, 375241, 19300916,
        99536154, 41213623, 91111604, 89249, 54238487, 49176568, 4361148, 108050977, 5909050, 256, 145014, 607, 124649449,
        14755720, 77147723, 83208770, 18182713, 2466, 322, 117338524, 115789857, 31382983, 1714597, 60189369, 1092737, 93624802,
        11737828, 40671769, 157482, 621175, 24920339, 65750454, 100929019, 2760893, 557487, 901261, 34373369, 45774871, 1705147,
        28849629, 46464111, 14178613, 25362, 27146383, 120080183, 4318655, 7253028, 94496, 54294557, 56145, 496469, 89076855,
        77392615, 574463, 9680137, 52046146, 1845175, 9916, 913182, 49082987, 337331, 21120966, 3872467, 5891186, 411, 2057,
        108127381, 69196384, 64574290, 6070153, 405823, 34708828, 2275894, 6565481, 117415842, 13270242, 42511192, 44535587,
        133988, 77438318, 1864209, 10900351, 15914292, 107742500, 183740, 37653842, 134617, 59603, 22228335, 17500082, 2834864,
        38496103, 1874514, 58882966, 14334820, 1071561, 59477635, 89083781, 6582956, 43488978, 57179463, 960529, 7678830,
        14917277, 3981780, 53976479, 106951888, 26106936, 14053028, 2708733, 65675975, 574449, 89186, 37238608, 12819210,
        18030812, 3427404, 3531518, 8211458, 47223330, 59821160, 6833228, 92050170, 3091687, 18931431, 244327, 4663801, 1758963,
        2893, 67112039, 1724751, 11660796, 93824735, 45028301, 23118688, 93506589, 4680170, 40078930, 46399697, 80191, 78576667,
        22720868, 3417068, 122728046, 59145, 2899575, 41434, 633637, 4203818, 33606749, 67377083, 123421256, 8180518, 336137,
        9289158, 9682729, 117450627, 4795757, 3603306, 36499402, 13013, 37418044, 4081593, 23347, 20658629, 108655202, 95375860,
        34645474, 17410529, 33147725, 160403, 49750283, 27748721, 1507989, 55484113, 842030, 123602821, 14775485, 29831822,
        27609280, 26216218, 28946797, 3860, 18536815, 3001, 4703512, 44040569, 15195793, 4231671, 34805250, 101879675, 13019091,
        29227470, 3259, 58629581, 20154969, 113101, 9026341, 2732521, 87338541, 190625, 41856616, 3766003, 119671, 35795949,
        134063, 32088478, 7346749, 5789790, 104100828, 40301740, 109317410, 13274869, 22153495, 893048, 538929, 2404995, 811201,
        19526098, 108121603, 11902877, 8254011, 39606660, 3988089, 19803401, 2316434, 585509, 176317, 3852609, 5769484, 73274115,
        108690573, 14449676, 72628304, 108704222, 75881349, 655596, 2554211, 136171, 67233439, 63222003, 71129038, 45326968,
        122939170, 29480, 10791799, 94611454, 13267459, 242420, 15908220, 96448920, 118302118, 3444070, 576874, 119336779,
        48760716, 97500823, 74112607, 19684405, 305876, 30268930, 7139341, 22357610, 543868, 497271, 83, 5136374, 65947614,
        82516858, 71791878, 745576, 7210186, 31399444, 35483089, 4655203, 160310, 27384845, 68763701, 385304, 7073617, 12911385,
        23602823, 143752, 13900556, 4035466, 72430984, 11473331, 7944675, 7460327, 123845093, 77376, 27839842, 11923, 65198965,
        12796802, 15237707, 207143, 92764091, 1384268, 119307914, 13736208, 16212046, 686424, 41423599, 12297192, 16139, 69,
        80226465, 5057, 116090410, 56528394, 12096555, 22650530, 4395941, 78259245, 20030038, 100207, 159956, 32244633, 80457154,
        39104813, 66329312, 117218, 7736888, 3928074, 18240331, 58958975, 43837302, 118912980, 139930, 36793080, 107676750,
        117266400, 73308106, 17007677, 14467004, 12502535, 2099697, 34862571, 6544809, 320053, 3731391, 9090706, 40325453,
        65501963, 41169285, 89488, 58449587, 697456, 7705474, 2441095, 21629865, 89643278, 3159764, 67049209, 8715888, 1340382,
        17766943, 20736901, 37166348, 75332202, 1094, 12889696, 45792, 284407, 193867, 12499551, 22265077, 2414156, 396658,
        195034, 148898, 25235295, 3273295, 70117500, 99349808, 71924386, 123359341, 9640, 2025238, 157174, 14545, 29482873,
        210032, 62953423, 9104656, 54234389, 10383566
    };

    auto sortFunc = sorters[GetParam()].sort;
    auto sorted = sortFunc(input);

    std::sort(input.begin(), input.end());

    EXPECT_EQ(input, sorted);
}

TEST_P(Sorting, Sort8)
{
    std::vector input
    {
        4, 14, 2, 5, 12, 295, 150, 3, 46, 34, 24, 74, 1577, 8, 841, 435, 3894, 1017, 1009, 167, 1, 4184, 5886, 762, 1214, 1006,
        6850, 3657, 13412, 11447, 11806, 439, 9160, 8283, 154, 5453, 2046, 46643, 1296, 23846, 28, 37132, 43515, 17938, 41930,
        8511, 5918, 31560, 57042, 74981, 2645, 60797, 23102, 28856, 92, 45973, 1423, 135199, 85854, 7445, 19445, 75088, 34513,
        386, 27419, 139799, 258009, 2343, 2963, 1700, 168076, 317927, 376553, 19333, 53808, 193099, 70617, 11048, 291823, 365401,
        9914, 68854, 25434, 9368, 667, 167747, 229233, 137, 2962, 8802, 352720, 21472, 36026, 9946, 98037, 20514, 507400, 132038,
        917648, 102320, 879126, 155009, 230009, 858, 320302, 27944, 64740, 354, 927179, 510, 362, 262724, 182722, 83368, 26118, 6,
        395627, 2166, 122112, 1313852, 151360, 41054, 1358, 21593, 151230, 152727, 625, 1161045, 2163300, 77065, 570, 880021,
        1779352, 121461, 295440, 408751, 20007, 8440, 18138, 542946, 83153, 154655, 196891, 2687748, 2088958, 2241258, 145703,
        407, 1842384, 105661, 2489563, 2488233, 2563396, 77, 2578571, 40014, 1469933, 295884, 137710, 2923101, 3971159, 2983186,
        23174, 2904611, 9103, 3376030, 4986, 683306, 1819781, 1709800, 585835, 1039315, 4160282, 1122199, 463995, 410473, 356579,
        4985654, 260859, 315778, 3442797, 1964, 973581, 3414731, 4961043, 1463341, 119539, 2468425, 5682122, 6897868, 4640828, 1,
        6884667, 159669, 121343, 8646, 328133, 709918, 10651, 1869349, 7091135, 182581, 5437811, 290540, 70, 906275, 24561, 7835977,
        4453185, 1828034, 80695, 1924606, 22776, 4412354, 6316363, 235434, 747641, 755796, 64945, 8474786, 287, 44504, 597263,
        1757719, 1031473, 279716, 9963578, 232356, 1855018, 790732, 1938, 10575405, 661501, 747794, 8878240, 3072204, 1769569, 33,
        449757, 255392, 5555659, 14067967, 1391300, 7699376, 4040383, 3132827, 15110250, 858404, 1738253, 568222, 1016124, 57185,
        3932121, 8594479, 2071802, 139658, 76, 7912886, 5694496, 267389, 7645869, 5128584, 15344, 196, 284670, 17869590, 3593067
    };

    auto sortFunc = sorters[GetParam()].sort;
    auto sorted = sortFunc(input);

    std::sort(input.begin(), input.end());

    EXPECT_EQ(input, sorted);
}

TEST_P(Sorting, Sort9)
{
    std::vector input{ 5, 10, 31, 5, 51, 25, 214, 176, 3, 353, 5, 499, 14, 517, 854, 210, 14, 1210, 261, 880, 137, 1510, 1079, 194,
        1110, 12, 3, 1487, 528, 1570, 804, 702, 1969, 215, 1739, 2572, 1260, 4465, 4801, 8, 4014, 362, 1448, 5672, 95, 7979, 95,
        3746, 2117, 2289, 5116, 4636, 2183, 6331, 11, 307, 2611, 3859, 11273, 13081, 9993, 15533, 40, 14047, 8676, 1204, 8178, 5213,
        8659, 927, 12920, 14229, 1048, 18643, 1527, 7665, 6713, 18420, 25066, 30, 8422, 98, 2030, 16668, 359, 12545, 400, 10943,
        10077, 14235, 27, 5819, 6241, 3771, 21196, 25843, 6132, 6470, 6804, 5781, 26319, 25571, 37816, 33481, 31224, 31313, 12534,
        239, 26622, 27105, 1622, 7971, 29764, 2239, 20755, 12509, 2500, 24691, 9052, 569, 43943, 24920, 30275, 586, 4259, 3255, 6,
        9023, 35, 49002, 72, 40413, 38253, 5964, 3695, 120, 33970, 27008, 31259, 55443, 78409, 12289, 52194, 468, 46494, 30148, 31866,
        39432, 29338, 11505, 76965, 8803, 19150, 66831, 18236, 209, 21505, 3093, 89443, 3888, 49603, 12364, 42021, 4181, 47305,
        107843, 7826, 59133, 52191, 81050, 51960, 91303, 94507, 82841, 22262, 60537, 103264, 38980, 26042, 97267, 87392, 4110, 63011,
        125934, 104691, 3528, 75801, 34049, 3689, 79601, 28334, 142, 99798, 43, 55274, 10386, 29858, 49284, 33952, 2759, 442, 273,
        107406, 20920, 44230, 11603, 127231, 57863, 10624, 6301, 119166, 2339, 16615, 128260, 48051, 1946, 87187, 190069, 110862,
        101918, 29177, 55187, 66743, 7040, 92412, 36387, 41, 1905, 77074, 86297, 26523, 35033, 5228, 47028, 20806, 144141, 106891,
        106324, 28600, 112100, 362, 12065, 252, 171054, 82288, 138184, 23038, 45449, 142700, 62547, 8570, 38160, 15994, 46077, 64471,
        3045, 30124, 113742, 169207, 164842, 1838, 197966, 270717, 14861, 28539, 266317, 8633, 30273, 87212, 206904, 7705, 29692,
        36991, 104318, 154341, 232957, 74247, 66685, 87995, 212477, 231071, 22549, 220359, 7017, 57765, 62348, 95076, 110189, 95338,
        97431, 296045, 166084, 82131, 111352, 187708, 81298, 67, 650, 195023, 219689, 150375, 185228, 276783, 262252, 332812, 310615,
        273179, 43599, 144545, 13939, 50, 95291, 173468, 41437, 90105, 369244, 179766, 608, 125564, 257105, 867, 135382, 115072,
        219507, 240361, 92835, 128309, 292257, 390279, 42498, 12014, 57751, 897, 79348, 82276, 130555, 420199, 273209, 38365, 173676,
        818, 240819, 157035, 17307, 302974, 444311, 285444, 362213, 178893, 39442, 456438, 416409, 161416, 311270, 467975, 420742,
        211445, 2779, 239818, 40781, 377898, 100999, 438481, 106463, 399523, 505816, 500912, 118, 4309, 36671, 517038, 240860, 322432,
        54501, 17866, 331774, 7513, 64750, 144339, 18618, 140918, 441829, 50523, 15785, 213298, 168427, 48901, 101751, 48942, 414509,
        281980, 667, 500993, 314106, 296266, 8286, 12306, 37032, 6713, 92365, 385650, 203081, 105366, 11879, 7781, 66591, 271688,
        549358, 251912, 77834, 345679, 92480, 492235, 129246, 231303, 16283, 334043, 414193, 683517, 41185, 83143, 218115, 582850,
        583081, 196826, 41518, 571135, 137892, 36768, 250819, 43960, 745867, 19933, 544740, 7944, 537476, 6892, 131113, 263621, 262846,
        495462, 376821, 256392, 39015, 371466, 696055, 85164, 310054, 15167, 754862, 110200, 722061, 254016, 695252, 176208, 626050,
        537757, 749204, 171502, 242367, 511987, 15958, 5597, 131330, 34282, 652711, 127906, 637792, 582053, 321218, 381022, 605428,
        259461, 69624, 442407, 301662, 393005, 483831, 723468, 481585, 255571, 798836, 24223, 210315, 167326, 170845, 473453, 331584,
        58777, 652302, 66657, 710129, 579898, 92542, 195100, 98792, 458294, 392916, 133989, 161292, 501759, 123772, 302101, 589834,
        844298, 260894, 729611, 766914, 25209, 311667, 59052, 923700, 6751, 163129, 39563, 441291, 43450, 205392, 74463, 818652, 614920,
        1224, 218370, 467391, 202309, 655304, 82882, 688254, 718719, 29580, 20166, 678301, 164829, 413327, 1054344, 424438, 306869,
        624221, 132949, 78667, 51207, 1104306, 148460, 38519, 558, 25679, 487161, 24019, 199845, 711374, 310991, 123565, 4, 799650,
        857772, 1027809, 20331, 906570, 369717, 50573, 799374, 4986, 793044, 1049259, 227266, 515120, 3203, 1015813, 23083, 1135051,
        48059, 110298, 1101902, 490381, 453693, 110988, 41512, 292740, 757970, 380705, 824235, 16976, 1999, 939684, 803383, 691969,
        6119, 26553, 45796, 381795, 1127187, 123309, 227799, 46375, 9915, 8273, 74499, 761985, 155758, 1582, 79004, 265619, 21743,
        211564, 190571, 335266, 172888, 1264924, 195793, 917130, 218063, 33790, 413632, 1386538, 746858, 726025, 113892, 940470, 124166,
        277570, 231340, 16952, 124259, 980040, 66285, 602379, 76485, 130703, 1366353, 492529, 634408, 20946, 28928, 927221, 1231881,
        32030, 3665, 49946, 54504, 173442, 761226, 1311202, 230293, 1297759, 611563, 463123, 10910, 1425145, 666164, 103415, 442096,
        1448742, 62108, 1433305, 283677, 1693072, 967412, 458338, 1208781, 3506, 1642436, 574897, 1696088, 547970, 642467, 488246,
        1721000, 50365, 224423, 968912, 453689, 1076339, 57871, 1017595, 51829, 701995, 33932, 1805990, 828998, 13610, 498030, 74711,
        702926, 173286, 626456, 376953, 1638312, 300674, 500388, 512254, 1551903, 401577, 693301, 240413, 60968, 1343010, 634535,
        187703, 1185665, 9257, 9510, 808412, 619294, 1436934, 1674281, 137994, 260071, 602910, 491, 1834, 1974705, 730483, 364059,
        53489, 394178, 106559, 1704348, 335049, 225099, 299, 2024603, 363733, 12365, 206995, 87564, 177310, 152742, 1853308, 1908892,
        66979, 1239841, 1456746, 656634, 37984, 484077, 1973925, 1918310, 1271329, 2, 414422, 159435, 4733, 249105, 216693, 43390, 13,
        359276, 1628579, 1851864, 649881, 1610140, 141609, 331591, 375142, 28405, 370636, 136314, 528700, 1167414, 2659, 1002373,
        1058553, 5668, 1073052, 1853310, 2297825, 1321528, 697656, 1991137, 1355547, 282946, 1473926, 127743, 233983, 1291786, 292189,
        987736, 2130463, 648347, 2026362, 397285, 450496, 327124, 1658558, 316382, 298931, 2361773, 58591, 20, 599870, 28195, 1926697,
        4371, 21092, 74169, 116095, 2084069, 149158, 891178, 855083, 1636967, 833151, 6435, 255429, 2019547, 707400, 157826, 1098667,
        417163, 2307494, 1695829, 728006, 84555, 70868
    };

    auto sortFunc = sorters[GetParam()].sort;
    auto sorted = sortFunc(input);

    std::sort(input.begin(), input.end());

    EXPECT_EQ(input, sorted);
}


INSTANTIATE_TEST_SUITE_P(SortingAlgos,
    Sorting,
    testing::Values(INSERT, SELECT, BUBBLE, MERGE),
    [](const testing::TestParamInfo<Sorting::ParamType> &info)
    {
        return sorters[info.param].name;
    });
